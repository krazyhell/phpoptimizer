"""
G√©n√©rateur de rapports pour PHP Optimizer
"""

import json
from pathlib import Path
from typing import List, Dict, Any
from enum import Enum
from datetime import datetime
from colorama import Fore, Style, Back

from .analyzer import AnalysisResult, Issue


class OutputFormat(Enum):
    CONSOLE = "console"
    JSON = "json"
    HTML = "html"
    
    @classmethod
    def from_string(cls, value: str):
        """Cr√©er enum depuis string"""
        for format_type in cls:
            if format_type.value == value:
                return format_type
        raise ValueError(f"Format non support√©: {value}")


class ReportGenerator:
    """G√©n√©rateur de rapports d'analyse"""
    
    def generate_console_report(self, results: List[Dict[str, Any]], verbose: bool = False):
        """G√©n√©rer un rapport console color√©"""
        if not results:
            print(f"{Fore.YELLOW}Aucun r√©sultat √† afficher{Style.RESET_ALL}")
            return
        
        # Statistiques g√©n√©rales
        total_files = len(results)
        successful_files = sum(1 for r in results if r.get('success', False))
        total_issues = sum(len(r.get('issues', [])) for r in results)
        
        print(f"\n{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}  RAPPORT D'ANALYSE PHP OPTIMIZER{Style.RESET_ALL}")
        print(f"{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
        
        print(f"\nüìä {Fore.BLUE}Statistiques g√©n√©rales:{Style.RESET_ALL}")
        print(f"   Fichiers analys√©s: {successful_files}/{total_files}")
        print(f"   Probl√®mes d√©tect√©s: {total_issues}")
        
        if total_issues == 0:
            print(f"\n{Fore.GREEN}‚úÖ Aucun probl√®me d√©tect√© ! Excellent travail !{Style.RESET_ALL}")
            return
        
        # R√©sum√© par s√©v√©rit√©
        severity_counts = {'error': 0, 'warning': 0, 'info': 0}
        for result in results:
            for issue in result.get('issues', []):
                severity = issue.get('severity', 'info')
                if severity in severity_counts:
                    severity_counts[severity] += 1
        
        print(f"\nüéØ {Fore.BLUE}R√©partition par s√©v√©rit√©:{Style.RESET_ALL}")
        if severity_counts['error'] > 0:
            print(f"   {Fore.RED}‚ùå Erreurs: {severity_counts['error']}{Style.RESET_ALL}")
        if severity_counts['warning'] > 0:
            print(f"   {Fore.YELLOW}‚ö†Ô∏è  Avertissements: {severity_counts['warning']}{Style.RESET_ALL}")
        if severity_counts['info'] > 0:
            print(f"   {Fore.BLUE}‚ÑπÔ∏è  Informations: {severity_counts['info']}{Style.RESET_ALL}")
        
        # D√©tails par fichier
        print(f"\nüìÅ {Fore.BLUE}D√©tails par fichier:{Style.RESET_ALL}")
        
        for result in results:
            if not result.get('success', False):
                print(f"\n{Fore.RED}‚ùå {result.get('file_path', 'Unknown')}{Style.RESET_ALL}")
                print(f"   Erreur: {result.get('error_message', 'Erreur inconnue')}")
                continue
            
            issues = result.get('issues', [])
            if not issues:
                if verbose:
                    print(f"\n{Fore.GREEN}‚úÖ {result.get('file_path', 'Unknown')}{Style.RESET_ALL}")
                    print(f"   Aucun probl√®me d√©tect√©")
                continue
            
            print(f"\n{Fore.YELLOW}üìÑ {result.get('file_path', 'Unknown')}{Style.RESET_ALL}")
            print(f"   {len(issues)} probl√®me(s) d√©tect√©(s)")
            
            if verbose:
                # Grouper par ligne pour un affichage plus lisible
                issues_by_line = {}
                for issue in issues:
                    line = issue.get('line', 0)
                    if line not in issues_by_line:
                        issues_by_line[line] = []
                    issues_by_line[line].append(issue)
                
                for line_num in sorted(issues_by_line.keys()):
                    line_issues = issues_by_line[line_num]
                    print(f"\n   üìç {Fore.CYAN}Ligne {line_num}:{Style.RESET_ALL}")
                    
                    for issue in line_issues:
                        # Utiliser la nouvelle fonction de formatage d√©taill√©
                        detailed_output = self._format_detailed_issue(issue)
                        print(detailed_output, end='')
        
        # Top des r√®gles les plus d√©clench√©es
        rule_counts = {}
        for result in results:
            for issue in result.get('issues', []):
                rule_name = issue.get('rule_name', 'unknown')
                rule_counts[rule_name] = rule_counts.get(rule_name, 0) + 1
        
        if rule_counts:
            print(f"\nüèÜ {Fore.BLUE}Top des probl√®mes les plus fr√©quents:{Style.RESET_ALL}")
            sorted_rules = sorted(rule_counts.items(), key=lambda x: x[1], reverse=True)
            
            for i, (rule_name, count) in enumerate(sorted_rules[:5], 1):
                print(f"   {i}. {rule_name}: {count} occurrence(s)")
        
        print(f"\n{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
    
    def generate_file_report(self, results: List[Dict[str, Any]], 
                           output_path: str, format_type: OutputFormat):
        """G√©n√©rer un rapport dans un fichier"""
        output_file = Path(output_path)
        
        if format_type == OutputFormat.JSON:
            self._generate_json_report(results, output_file)
        elif format_type == OutputFormat.HTML:
            self._generate_html_report(results, output_file)
        else:
            raise ValueError(f"Format de fichier non support√©: {format_type}")
    
    def _generate_json_report(self, results: List[Dict[str, Any]], output_file: Path):
        """G√©n√©rer un rapport JSON"""
        report_data = {
            'generated_at': datetime.now().isoformat(),
            'summary': {
                'total_files': len(results),
                'successful_analyses': sum(1 for r in results if r.get('success', False)),
                'total_issues': sum(len(r.get('issues', [])) for r in results),
                'total_analysis_time': sum(r.get('analysis_time', 0) for r in results)
            },
            'results': results
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
    
    def _generate_html_report(self, results: List[Dict[str, Any]], output_file: Path):
        """G√©n√©rer un rapport HTML"""
        # Calculer les statistiques
        total_files = len(results)
        successful_files = sum(1 for r in results if r.get('success', False))
        total_issues = sum(len(r.get('issues', [])) for r in results)
        
        severity_counts = {'error': 0, 'warning': 0, 'info': 0}
        rule_counts = {}
        
        for result in results:
            for issue in result.get('issues', []):
                severity = issue.get('severity', 'info')
                if severity in severity_counts:
                    severity_counts[severity] += 1
                rule_name = issue.get('rule_name', 'unknown')
                rule_counts[rule_name] = rule_counts.get(rule_name, 0) + 1
        
        # G√©n√©rer le HTML
        html_content = f"""
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport PHP Optimizer</title>
    <style>
        body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 8px 8px 0 0; }}
        .header h1 {{ margin: 0; font-size: 2.5em; }}
        .header p {{ margin: 10px 0 0 0; opacity: 0.9; }}
        .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; padding: 30px; }}
        .stat-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; }}
        .stat-number {{ font-size: 2em; font-weight: bold; color: #333; }}
        .stat-label {{ color: #666; margin-top: 5px; }}
        .severity-error {{ color: #dc3545; }}
        .severity-warning {{ color: #ffc107; }}
        .severity-info {{ color: #17a2b8; }}
        .content {{ padding: 0 30px 30px 30px; }}
        .file-result {{ margin-bottom: 30px; border: 1px solid #e9ecef; border-radius: 8px; overflow: hidden; }}
        .file-header {{ background: #f8f9fa; padding: 15px 20px; border-bottom: 1px solid #e9ecef; }}
        .file-path {{ font-weight: bold; color: #333; }}
        .issue-count {{ color: #666; font-size: 0.9em; }}
        .issues {{ padding: 20px; }}
        .issue {{ margin-bottom: 20px; padding: 15px; border-left: 4px solid #ddd; background: #f8f9fa; }}
        .issue.error {{ border-left-color: #dc3545; }}
        .issue.warning {{ border-left-color: #ffc107; }}
        .issue.info {{ border-left-color: #17a2b8; }}
        .issue-header {{ display: flex; justify-content: between; align-items: center; margin-bottom: 10px; }}
        .issue-message {{ font-weight: bold; color: #333; }}
        .issue-line {{ color: #666; font-size: 0.9em; }}
        .issue-suggestion {{ color: #666; font-style: italic; margin-bottom: 10px; }}
        .code-snippet {{ background: #2d3748; color: #e2e8f0; padding: 10px; border-radius: 4px; font-family: 'Courier New', monospace; font-size: 0.9em; overflow-x: auto; }}
        .no-issues {{ text-align: center; padding: 40px; color: #28a745; }}
        .file-header-content {{ display: flex; justify-content: space-between; align-items: center; }}
        .copy-url-btn {{ 
            background: #6c757d; 
            color: white; 
            border: none; 
            padding: 8px 12px; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 0.8em;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: background-color 0.2s;
        }}
        .copy-url-btn:hover {{ background: #5a6268; }}
        .copy-url-btn.copied {{ background: #28a745; }}
        .copy-icon {{ font-size: 1em; }}
        .tooltip {{ position: relative; }}
        .tooltip-text {{ 
            position: absolute; 
            bottom: 125%; 
            left: 50%; 
            transform: translateX(-50%);
            background: #333; 
            color: white; 
            padding: 5px 8px; 
            border-radius: 4px; 
            font-size: 0.7em;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.2s;
            z-index: 1000;
        }}
        .tooltip:hover .tooltip-text {{ opacity: 1; visibility: visible; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä Rapport PHP Optimizer</h1>
            <p>G√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}</p>
        </div>
        
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number">{successful_files}/{total_files}</div>
                <div class="stat-label">Fichiers analys√©s</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{total_issues}</div>
                <div class="stat-label">Probl√®mes d√©tect√©s</div>
            </div>
            <div class="stat-card">
                <div class="stat-number severity-error">{severity_counts['error']}</div>
                <div class="stat-label">Erreurs</div>
            </div>
            <div class="stat-card">
                <div class="stat-number severity-warning">{severity_counts['warning']}</div>
                <div class="stat-label">Avertissements</div>
            </div>
            <div class="stat-card">
                <div class="stat-number severity-info">{severity_counts['info']}</div>
                <div class="stat-label">Informations</div>
            </div>
        </div>
        
        <div class="content">
"""
        
        if total_issues == 0:
            html_content += """
            <div class="no-issues">
                <h2>üéâ Aucun probl√®me d√©tect√© !</h2>
                <p>Votre code respecte toutes les r√®gles d'optimisation configur√©es.</p>
            </div>
"""
        else:
            for result in results:
                if not result.get('success', False):
                    file_path = result.get('file_path', 'Unknown')
                    html_content += f"""
            <div class="file-result">
                <div class="file-header">
                    <div class="file-header-content">
                        <div>
                            <div class="file-path">‚ùå {file_path}</div>
                            <div class="issue-count">Erreur d'analyse: {result.get('error_message', 'Erreur inconnue')}</div>
                        </div>
                        <button class="copy-url-btn tooltip" onclick="return copyToClipboard(event, '{file_path.replace(chr(92), chr(92) + chr(92))}')">
                            <span class="copy-icon">üìã</span>
                            <span>Copier le chemin</span>
                            <span class="tooltip-text">Copier le chemin du fichier</span>
                        </button>
                    </div>
                </div>
            </div>
"""
                    continue
                
                issues = result.get('issues', [])
                if not issues:
                    continue
                
                file_path = result.get('file_path', 'Unknown')
                html_content += f"""
            <div class="file-result">
                <div class="file-header">
                    <div class="file-header-content">
                        <div>
                            <div class="file-path">üìÑ {file_path}</div>
                            <div class="issue-count">{len(issues)} probl√®me(s) d√©tect√©(s)</div>
                        </div>
                        <button class="copy-url-btn tooltip" onclick="return copyToClipboard(event, '{file_path.replace(chr(92), chr(92) + chr(92))}')">
                            <span class="copy-icon">üìã</span>
                            <span>Copier le chemin</span>
                            <span class="tooltip-text">Copier le chemin du fichier</span>
                        </button>
                    </div>
                </div>
                <div class="issues">
"""
                
                for issue in issues:
                    severity = issue.get('severity', 'info')
                    html_content += f"""
                    <div class="issue {severity}">
                        <div class="issue-header">
                            <div class="issue-message">{issue.get('message', '')}</div>
                            <div class="issue-line">Ligne {issue.get('line', 0)}</div>
                        </div>
                        <div class="issue-suggestion">üí° {issue.get('suggestion', '')}</div>
"""
                    
                    code_snippet = issue.get('code_snippet', '')
                    if code_snippet:
                        html_content += f"""
                        <div class="code-snippet">{code_snippet}</div>
"""
                    
                    html_content += "                    </div>\n"
                
                html_content += """
                </div>
            </div>
"""
        
        # Cr√©er le JavaScript avec √©chappements corrects
        js_script = r"""
        </div>
    </div>
    
    <script>
        // D√©finir la fonction dans le scope global
        window.copyToClipboard = function(event, filePath) {
            // Emp√™cher le comportement par d√©faut
            event.preventDefault();
            event.stopPropagation();
            
            const button = event.target.closest('.copy-url-btn');
            if (!button) {
                return false;
            }
            
            const originalText = button.innerHTML;
            
            // Convertir le chemin Windows en chemin normalis√©
            let normalizedPath;
            if (filePath.match(/^[a-zA-Z]:/)) {
                // Chemin Windows absolu (C:, D:, etc.) - juste normaliser les slashes
                normalizedPath = filePath.replace(/\\/g, '/');
            } else {
                // Chemin relatif - ajouter le chemin de base
                const basePath = window.location.href.split('/').slice(0, -1).join('/').replace('file:///', '');
                normalizedPath = basePath + '/' + filePath.replace(/\\/g, '/');
            }
            
            // Fonction d'erreur
            function showError(error) {
                button.innerHTML = '<span class="copy-icon">‚ùå</span><span>Erreur</span>';
                button.style.background = '#dc3545';
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.style.background = '';
                }, 2000);
                
                // Dernier recours : afficher l'URL
                setTimeout(() => {
                    if (confirm('Impossible de copier automatiquement. Voulez-vous voir le chemin √† copier manuellement ?')) {
                        prompt('Copiez ce chemin:', normalizedPath);
                    }
                }, 100);
            }
            
            // M√©thode moderne (API Clipboard)
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(normalizedPath)
                    .then(() => {
                        showSuccess();
                    })
                    .catch(err => {
                        window.fallbackCopy(normalizedPath, showSuccess, showError);
                    });
            } else {
                window.fallbackCopy(normalizedPath, showSuccess, showError);
            }
            
            return false;
        }
        
        // Fonction fallback √©galement dans le scope global
        window.fallbackCopy = function(text, onSuccess, onError) {
            try {
                // Cr√©er un √©l√©ment textarea temporaire
                const textarea = document.createElement('textarea');
                textarea.value = text;
                textarea.style.position = 'fixed';
                textarea.style.top = '0';
                textarea.style.left = '0';
                textarea.style.width = '2em';
                textarea.style.height = '2em';
                textarea.style.padding = '0';
                textarea.style.border = 'none';
                textarea.style.outline = 'none';
                textarea.style.boxShadow = 'none';
                textarea.style.background = 'transparent';
                textarea.style.opacity = '0';
                
                document.body.appendChild(textarea);
                
                // Focus et s√©lection
                textarea.focus();
                textarea.select();
                textarea.setSelectionRange(0, textarea.value.length);
                
                // Tentative de copie
                const successful = document.execCommand('copy');
                
                // Nettoyage
                document.body.removeChild(textarea);
                
                if (successful) {
                    onSuccess();
                } else {
                    onError('execCommand a retourn√© false');
                }
                
            } catch (err) {
                onError(err);
            }
        }
        
        // Test des capacit√©s au chargement (optionnel)
    </script>
</body>
</html>
"""
        
        html_content += js_script
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
    
    def _get_severity_color(self, severity: str) -> str:
        """Obtenir la couleur pour une s√©v√©rit√©"""
        colors = {
            'error': Fore.RED,
            'warning': Fore.YELLOW,
            'info': Fore.BLUE
        }
        return colors.get(severity, Fore.WHITE)
    
    def _get_severity_icon(self, severity: str) -> str:
        """Obtenir l'ic√¥ne pour une s√©v√©rit√©"""
        icons = {
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        }
        return icons.get(severity, '‚Ä¢')
    
    def _get_detailed_description(self, issue: Dict[str, Any]) -> str:
        """Retourner une description d√©taill√©e de l'erreur bas√©e sur la r√®gle"""
        rule_name = issue.get('rule_name', '')
        code_snippet = issue.get('code_snippet', '')
        
        descriptions = {
            'performance.select_star': {
                'description': "L'utilisation de SELECT * r√©cup√®re toutes les colonnes de la table, m√™me celles non utilis√©es.",
                'impact': "Impact sur les performances : transfert de donn√©es inutiles, utilisation m√©moire accrue.",
                'solution': "Sp√©cifiez uniquement les colonnes n√©cessaires : SELECT id, nom, quantite FROM produit",
                'example': "‚ùå SELECT * FROM produit\n‚úÖ SELECT id, nom, quantite FROM produit"
            },
            'performance.query_in_loop': {
                'description': "Ex√©cution de requ√™tes SQL √† l'int√©rieur d'une boucle (probl√®me N+1).",
                'impact': "Impact critique : multiplication des acc√®s base de donn√©es, ralentissements majeurs.",
                'solution': "Regroupez les requ√™tes ou utilisez des JOINs pour r√©cup√©rer toutes les donn√©es en une fois.",
                'example': "‚ùå foreach($users as $user) { query('SELECT * FROM posts WHERE user_id='.$user['id']); }\n‚úÖ query('SELECT * FROM posts WHERE user_id IN ('.implode(',', $userIds).')')"
            },
            'performance.memory_management': {
                'description': "Gros tableau ou structure de donn√©es non lib√©r√©e avec unset().",
                'impact': "Impact m√©moire : accumulation en m√©moire, risque de d√©passement de memory_limit.",
                'solution': "Lib√©rez explicitement les gros tableaux avec unset() apr√®s utilisation.",
                'example': f"‚ùå {code_snippet}\n‚úÖ {code_snippet}\n    unset($large_array); // Lib√©ration m√©moire"
            },
            'performance.inefficient_loops': {
                'description': "Appel de count() dans la condition d'une boucle for.",
                'impact': "Impact performance : count() recalcul√© √† chaque it√©ration.",
                'solution': "Stockez count() dans une variable avant la boucle.",
                'example': "‚ùå for($i=0; $i<count($array); $i++)\n‚úÖ $length = count($array); for($i=0; $i<$length; $i++)"
            },
            'performance.string_concatenation_in_loop': {
                'description': "Concat√©nation de cha√Ænes avec .= dans une boucle.",
                'impact': "Impact performance : r√©allocation de cha√Æne √† chaque it√©ration.",
                'solution': "Utilisez un tableau et implode() pour de meilleures performances.",
                'example': "‚ùå foreach($items as $item) { $str .= $item; }\n‚úÖ $parts = []; foreach($items as $item) { $parts[] = $item; } $str = implode('', $parts);"
            },
            'performance.obsolete_function': {
                'description': "Utilisation d'une fonction PHP obsol√®te ou d√©pr√©ci√©e.",
                'impact': "Impact s√©curit√©/maintenance : fonction supprim√©e dans les nouvelles versions PHP.",
                'solution': "Remplacez par l'√©quivalent moderne selon la fonction.",
                'example': "‚ùå mysql_query() ‚Üí ‚úÖ PDO ou mysqli\n‚ùå ereg() ‚Üí ‚úÖ preg_match()\n‚ùå split() ‚Üí ‚úÖ explode() ou preg_split()"
            },
            'performance.error_suppression': {
                'description': "Utilisation de l'op√©rateur @ pour supprimer les erreurs.",
                'impact': "Impact performance : @ masque toutes les erreurs et ralentit l'ex√©cution.",
                'solution': "G√©rez les erreurs explicitement avec try/catch ou v√©rifications conditionnelles.",
                'example': "‚ùå @file_get_contents($url)\n‚úÖ if(file_exists($file)) { $content = file_get_contents($file); }"
            },
            'security.sql_injection': {
                'description': "Variable utilisateur directement incluse dans une requ√™te SQL.",
                'impact': "RISQUE CRITIQUE : injection SQL possible, compromission de la base de donn√©es.",
                'solution': "Utilisez IMP√âRATIVEMENT des requ√™tes pr√©par√©es avec des param√®tres li√©s.",
                'example': "‚ùå \"SELECT * FROM users WHERE id = $id\"\n‚úÖ \"SELECT * FROM users WHERE id = ?\" avec bindParam()"
            },
            'security.xss_vulnerability': {
                'description': "Affichage direct de donn√©es utilisateur sans √©chappement.",
                'impact': "RISQUE CRITIQUE : injection de code JavaScript, vol de sessions.",
                'solution': "√âchappez TOUJOURS les donn√©es avec htmlspecialchars() ou √©quivalent.",
                'example': "‚ùå echo $_GET['name']\n‚úÖ echo htmlspecialchars($_GET['name'], ENT_QUOTES, 'UTF-8')"
            },
            'performance.inefficient_xpath': {
                'description': "Utilisation de s√©lecteurs XPath lents ou inefficaces.",
                'impact': "Impact performance : parcours complet de l'arbre XML, tr√®s lent sur gros documents.",
                'solution': "Utilisez des s√©lecteurs XPath sp√©cifiques plut√¥t que des descendants g√©n√©riques.",
                'example': "‚ùå //*[@id='element'] ou //div//span\n‚úÖ /root/section/div[@id='element']"
            },
            'performance.inefficient_array_check': {
                'description': "Utilisation d'array_key_exists() au lieu d'isset() pour des v√©rifications simples.",
                'impact': "Impact performance : array_key_exists() est plus lent car il v√©rifie aussi les valeurs null.",
                'solution': "Utilisez isset() si les valeurs null ne sont pas importantes dans votre contexte.",
                'example': "‚ùå if (array_key_exists($key, $array))\n‚úÖ if (isset($array[$key]))"
            },
            'performance.file_operations': {
                'description': "Ouvertures/fermetures r√©p√©t√©es de fichiers dans des boucles.",
                'impact': "Impact performance : op√©rations I/O co√ªteuses r√©p√©t√©es inutilement.",
                'solution': "Groupez les op√©rations fichiers ou utilisez file_get_contents() pour les petits fichiers.",
                'example': "‚ùå foreach($files as $file) { $fp = fopen($file, 'r'); ... fclose($fp); }\n‚úÖ $content = file_get_contents($file); // Pour petits fichiers"
            },
            'performance.unused_variables': {
                'description': "Variables d√©clar√©es mais apparemment non utilis√©es dans le code.",
                'impact': "Impact maintenance : code difficile √† lire, possibles fuites m√©moire mineures.",
                'solution': "Supprimez les variables inutilis√©es ou v√©rifiez qu'elles sont r√©ellement utilis√©es.",
                'example': "‚ùå $unused_var = 'test'; // Variable jamais utilis√©e\n‚úÖ // Supprimez la ligne ou utilisez la variable"
            },
            'performance.repeated_calculations': {
                'description': "Expressions math√©matiques identiques calcul√©es plusieurs fois.",
                'impact': "Impact performance : recalculs inutiles, surtout dans les boucles.",
                'solution': "Stockez le r√©sultat du calcul dans une variable r√©utilisable.",
                'example': "‚ùå $a = $x * $y + $z; $b = $x * $y + $z;\n‚úÖ $calc = $x * $y + $z; $a = $calc; $b = $calc;"
            },
            'performance.dom_query_in_loop': {
                'description': "Requ√™tes DOM co√ªteuses (getElementById, querySelector) dans des boucles.",
                'impact': "Impact performance critique : parcours DOM r√©p√©t√©, tr√®s lent sur gros documents.",
                'solution': "Extrayez les requ√™tes DOM hors des boucles et r√©utilisez les r√©sultats.",
                'example': "‚ùå for($i=0; $i<100; $i++) { $el = $dom->getElementById('item'); }\n‚úÖ $el = $dom->getElementById('item'); for($i=0; $i<100; $i++) { /* utiliser $el */ }"
            },
            'performance.inefficient_regex': {
                'description': "Expressions r√©guli√®res avec des quantificateurs inefficaces comme .*",
                'impact': "Impact performance : backtracking excessif, risque de ReDoS (Regex Denial of Service).",
                'solution': "Utilisez des quantificateurs plus sp√©cifiques (+, ?, {n,m}) et des classes de caract√®res pr√©cises.",
                'example': "‚ùå preg_match('/.*@.*/', $email)\n‚úÖ preg_match('/[^@]+@[^@]+\\.[^@]+/', $email)"
            },
            'security.weak_password_hashing': {
                'description': "Utilisation d'algorithmes de hachage faibles (MD5, SHA1) pour les mots de passe.",
                'impact': "RISQUE CRITIQUE : mots de passe facilement cassables par force brute ou rainbow tables.",
                'solution': "Utilisez password_hash() avec PASSWORD_DEFAULT ou PASSWORD_ARGON2ID.",
                'example': "‚ùå $hash = md5($password)\n‚úÖ $hash = password_hash($password, PASSWORD_DEFAULT)"
            },
            'security.file_inclusion': {
                'description': "Inclusion de fichiers bas√©e sur des donn√©es utilisateur non valid√©es.",
                'impact': "RISQUE CRITIQUE : inclusion de fichiers arbitraires, ex√©cution de code malveillant.",
                'solution': "Validez et filtrez strictement les noms de fichiers, utilisez une whitelist.",
                'example': "‚ùå include $_GET['page'].'.php'\n‚úÖ $allowed = ['home', 'about']; if(in_array($_GET['page'], $allowed)) include $_GET['page'].'.php'"
            },
            'best_practices.psr_compliance': {
                'description': "Lignes de code d√©passant la limite recommand√©e de 120 caract√®res.",
                'impact': "Impact lisibilit√© : code difficile √† lire, probl√®mes d'affichage sur certains √©crans.",
                'solution': "D√©coupez les lignes longues, utilisez des variables interm√©diaires.",
                'example': "‚ùå $very_long_variable_name = some_function_with_many_parameters($param1, $param2, $param3, $param4);\n‚úÖ $result = some_function_with_many_parameters(\n    $param1, $param2,\n    $param3, $param4\n);"
            }
        }
        
        rule_info = descriptions.get(rule_name, {
            'description': "Probl√®me d√©tect√© par l'analyseur.",
            'impact': "Impact √† √©valuer selon le contexte.",
            'solution': "Consultez la documentation pour plus de d√©tails.",
            'example': ""
        })
        
        return rule_info

    def _format_detailed_issue(self, issue: Dict[str, Any]) -> str:
        """Formater un probl√®me avec des d√©tails complets"""
        rule_info = self._get_detailed_description(issue)
        severity = issue.get('severity', 'info')
        severity_color = self._get_severity_color(severity)
        severity_icon = self._get_severity_icon(severity)
        
        # Message principal
        output = f"      {severity_color}{severity_icon} {issue.get('message', '')}{Style.RESET_ALL}\n"
        
        # Description d√©taill√©e
        output += f"        üìñ {Fore.LIGHTBLUE_EX}Description:{Style.RESET_ALL} {rule_info['description']}\n"
        
        # Impact
        impact_color = Fore.RED if severity == 'error' else Fore.YELLOW if severity == 'warning' else Fore.CYAN
        output += f"        ‚ö†Ô∏è  {impact_color}Impact:{Style.RESET_ALL} {rule_info['impact']}\n"
        
        # Solution sugg√©r√©e
        output += f"        üí° {Fore.GREEN}Solution:{Style.RESET_ALL} {rule_info['solution']}\n"
        
        # Exemple si disponible
        if rule_info['example']:
            output += f"        üìù {Fore.LIGHTBLACK_EX}Exemple:{Style.RESET_ALL}\n"
            for line in rule_info['example'].split('\n'):
                output += f"           {Fore.LIGHTBLACK_EX}{line}{Style.RESET_ALL}\n"
        
        # Code incrimin√©
        code_snippet = issue.get('code_snippet', '')
        if code_snippet:
            output += f"        üîç {Fore.LIGHTRED_EX}Code concern√©:{Style.RESET_ALL} {code_snippet}\n"
        
        return output
